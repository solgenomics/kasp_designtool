#! /usr/bin/python -O
# -*- coding: utf-8 -*-
# fetch_segment_v_0_6.py
# extracting one segment from one sequence of a multifasta file

# creation    : jpb - 06-01-2006
# version 0.2 : jpb - 21-08-2009
# processing lines ending with CR LF
# version 0.3 : jpb - 11-10-2012
# 2 more options : no_header, upper
# default value for pi (1) and for pf (end of sequence) 
# version 0.4 : jpb - 23-10-2012
# 1 more option : -rev_cpl
# version 0.4 : jpb - 25-02-2013
# 1 more option : - -new_header
# version 0.5 : jpb - 18-03-2014
# out file is opened in 'append' mode instead of mode 'write' mode
# version 0.6 : jpb - 25-08-2014
# adding license and a few modification for distribution

__version__ = "0.6"

# LICENSE
# ------------------------------------------------------------------------
# This software is governed by the CeCILL license under French law and
# abiding by the rules of distribution of free software.  You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL license and that you accept its terms.
# 
# Authors: INRA - GAFL - UR 1052 Génétique et Amélioration des Fruits et Légumes
# Domaine Saint-Maurice - CS 60094 - F-84143 Montfavet cedex - France
# Jean-Paul Bouchet - jean-paul.bouchet@avignon.inra.fr
# 

"""fetch_segment -id ident -db f_db [-pi n1] [-pf n2] [-out f_out] [-lg n3] [-no_header] [-upper] [-lower] [-rev_cpl] [-new_header new_header] [-h] [-H]
Extracting the segment from position 'n1' to position 'n2' of the sequence of the multifasta 'file f_db' whose header is 'ident'.
"""

#==================#
# modules importés #
#==================#
import string, sys

#=====================#
# Liste des fonctions #
#=====================#
# chop(s
# complement(nt)
# edit_sequence(sequence)
# erreur(no, s = ""
# help()
# help_detailed()
# reverse_complement(seq)
# trait_ligne(ligne)



#=======================================================#
# function chop(s) : trimming \n at the end of a string #
#=======================================================#

def chop(s) :

  if type(s) == type('a') and len(s) > 0 :
    if s[-1] == '\n' :
      if len(s) > 1 and s[-2] == '\r' :
        return s[:-2]
      else :
        return s[:-1]

  return s


#==========================#
# function complement(nt)  #
#==========================#

def complement(nt) :

  comp = ""
  if not len(nt) :
    return comp

  ba = nt[0]
  if ba == "A" :
    comp = "T"
  elif ba == "a" :
    comp = "t"
  elif ba == "C" :
    comp = "G"
  elif ba == "c" :
    comp = "g"
  elif ba == "G" :
    comp = "C"
  elif ba == "g" :
    comp = "c"
  elif ba == "T" :
    comp = "A"
  elif ba == "t" :
    comp = "a"
  elif ba == "R" :
    # GA -> CT
    comp = "Y"
  elif ba == "r" :
    comp = "y"
  elif ba == "Y" :
    # TC -> AG
    comp = "R"
  elif ba == "y" :
    comp = "r"
  elif ba == "K" :
    # GT -> CA
    comp = "M"
  elif ba == "k" :
    comp = "m"
  elif ba == "M" :
    # AC -> TG
    comp = "K"
  elif ba == "m" :
    comp = "k"
  elif ba in ("S", "s", "W", "w", "N", "n", "X", "x", "-") :
    # GC -> CG, AT -> TA
    comp = ba
  else :
    comp = "N"

  return comp



#=========================#
# edit_sequence(sequence) #
#=========================#

def edit_sequence(sequence) :
  cpt = 0
  for i in range(0, len(sequence)) :
    car = sequence[i]
    if car != "\n" :
      cpt = cpt + 1
      if fichier_out :
        if flag_upper :
          fichier_out.write(sequence[i].upper())
        elif flag_lower :
          fichier_out.write(sequence[i].lower())
        else :
          fichier_out.write(sequence[i])
      else:
        if flag_upper :
          sys.stdout.write(sequence[i].upper())
        elif flag_lower :
          sys.stdout.write(sequence[i].lower())
        else :
          sys.stdout.write(sequence[i])
      if cpt == lg :
        if fichier_out :
          fichier_out.write("\n")
        else:
          sys.stdout.write("\n")
        cpt = 0

  if cpt > 0 :
    if fichier_out :
      fichier_out.write("\n")
    else:
      sys.stdout.write("\n")


#=====================================#
# erreur(no, s) : traitement d'erreur #
#=====================================#

def erreur(no, s = "") :
  lst_erreurs = [ \
    (1, "Anomalie dans le traitement d'une erreur (argument non entier : ",").", 1),
    (2, "Anomalie dans le traitement d'une erreur (argument entier en dehors des bornes : ", ").", 1),
    (3, "Syntaxe : fetch_segment -id ident -db fichier_db [-pi debut] [-pf fin] [-out fichier_out] [-lg longueur] [-no_header] [-upper] [-lower] [-rev_cpl] [-new_header new_header]", "", 1),
    (4, "Le fichier d'entrée n'est pas un fichier fasta", "",1),
    (5, "Impossible d'ouvrir le fichier ", " en mode r (read).", 1),
    (6, "Impossible d'ouvrir le fichier ", " en mode w (ecriture).",1),
    (7, "Erreur dans le traitement de la ligne ", ".",1)
    ]

  no_erreur = 0
  libelle   = ""

  if type(no) == type(1) :

    if no < 1 or no > len(lst_erreurs) :
      no_erreur = 2
      libelle   = str(no)

    else :
      no_erreur = no
      libelle   = s

  else :
    no_erreur = 1
    libelle   = no

  t_erreur = lst_erreurs[no_erreur - 1]

  sys.stderr.write("\nErreur %d ligne %d :\n" % (no_erreur, no_ligne_lue))
  sys.stderr.write("%s\n\n" % (t_erreur[1] + libelle + t_erreur[2]))
  sys.stderr.flush()

  if t_erreur[3] == 0 :
    return

  sys.exit(1)


#============================================================#
# function help() : to display information about the program #
#============================================================#

def help() :

  print """fetch_segment.py -id ident -db f_db [-pi n1] [-pf n2] [-out f_out] [-lg n3] [-no_header] [-upper] [-lower] [-rev_cpl] [-new_header new_header] [-h] [-H]

  This program extracts the segment from position 'n1' to position 'n2' of the sequence of the multifasta file 'f_db' whose header is 'ident'. This sequence is written, either on the standard output, or in the file 'f_out'.

  Arguments:
  -h                             : to get some information about this program (what you get now)
  -H                             : to get detailed information about this program
  -id ident                      : identifier of the sequence in the 'f_db' multifasta file
                                   It is the string between '>' and the first separator (' ', ...) in the header
                                   mandatory
  -db f_db                       : path to the multifasta file in which a sequence 'ident' is searched
                                   mandatory
  -pi n1                         : initial position
                                   optional - default value: 1 (the first nucleotide of the sequence 'ident'
  -pf n2                         : final position
                                   optional - default value: the end of the sequence 'ident'
  -out f_out                     : path to the file in which the segment will be written
                                   optional - if not specified, the segment will be written on the standard output
  -lg n3                         : length of the sequence lines in the output file
                                   optional - default value: 60
  -no_header                     : to specify that there will be no header line in the output
                                   optional
  -upper                         : to specify that the sequence will be written with upper characters
                                   optional
  -lower                         : to specify that the sequence will be written with lower characters
                                   optional
  -rev_cpl                       : to specify that the reverse complement of the found sequence will be written
                                   in the output file
                                   optional
  -new_header new_header         : the string 'new_header' will be used as header in the output file
                                   optional


"""
  sys.exit(0)



#=====================================================================#
# function help_detailed() : to display information about the program #
#=====================================================================#

def help_detailed() :

  help()



#===================================#
# function reverse_complement(seq)  #
#===================================#

def reverse_complement(seq) :
  rev_seq = ""
  len_seq = len(seq)
  for i in range(len_seq) :
    rev_seq += complement(seq[len_seq - i - 1])

  return rev_seq



#======================================================#
# trait_ligne(ligne) : ligne de la séquence recherchée #
#======================================================#

def trait_ligne(ligne) :

  global sequence, pos
  # ligne contient le LF et peut contenir le CR
  if ligne[-1:] == "\n" :
    if len(ligne) > 1 and ligne[-2:-1] == "\r" :
      longueur = len(ligne) - 2
    else :
      longueur = len(ligne) - 1
  else :
    longueur = len(ligne)
        
  retour = 1
  if pos + longueur < debut :
    # on n'a pas encore atteint le segment
    pos = pos + longueur
    return 1

  else :
    # définition de la partie de la ligne à écrire
    debut_zone = debut - pos
    if fin :
      fin_zone = fin - pos + 1
    else :
      fin_zone = pos + longueur
    if debut_zone < 0 :
      debut_zone = 0
    if fin_zone > longueur :
      fin_zone = longueur
    if fin_zone <= 0 :
      return 2
    sequence = sequence + ligne[debut_zone:fin_zone]
    pos = pos + longueur

  return retour


#================================#
# Partie principale du programme #
#================================#

if __name__ == "__main__" :

  # variables globales
  #===================

  debut           = 0       # position initiale du segment
  debut_dft       = 1
  etat            = 0       # etat de lecture du fichier
  fichier_db      = 0       # fichier d'entrée
  fichier_out     = 0       # fichier de sortie
  fin             = 0       # position finale du segment
  flag_header     = 1
  flag_lower      = 0
  flag_rev_cpl    = 0
  flag_upper      = 0
  header          = ""
  lg              = 60      # longueur des lignes de séquence
  lg_db           = 0
  nb_arg          = len(sys.argv)
  new_header      = ""      # nouvel entête
  no_ligne_lue    = 0       # numero de ligne lue
  nom_fichier_db  = ""      # nom du fichier d'entrée
  nom_cherche     = ""      # nom de la séquence fasta recherchee
  nom_fichier_out = ""      # nom du fichier de sortie
  nomTC           = ""      # nom de la séquence dans le fichier
  pos             = 1       # position courante dans la séquence recherchée
  recup_fasta     = ""      # fichier sequence récupéree
  sequence        = ""      


  # Traitement des arguments
  #=========================

  if (nb_arg < 5 or nb_arg > 17) and (nb_arg != 2 or sys.argv[1] not in ("-h", "-H")) :
    sys.stderr.write(str(sys.argv) + "\n")
    erreur(3)
  i = 1
  while i < nb_arg :
    # -id identifier of the researched sequence
    if sys.argv[i] == "-id" and i < nb_arg :

      try:
        nom_cherche = sys.argv[i+1]
      except :
        sys.stderr.write(str(sys.argv) + "\n")
        erreur(3)
      i = i + 1
        
    # -db fichier_db : chemin du fichier multifasta  
    elif sys.argv[i] == "-db" and i < nb_arg :
      try :
        nom_fichier_db = sys.argv[i+1]
      except :
        sys.stderr.write(str(sys.argv) + "\n")
        erreur(3)
      i = i + 1

    # -pi debut : position initiale du segment
    elif sys.argv[i] == "-pi" and i < nb_arg :
      try :
        debut = int(sys.argv[i+1])
      except :
        sys.stderr.write(str(sys.argv) + "\n")
        erreur(3)
      i = i + 1

    # -pf fin : position finale du segment
    elif sys.argv[i] == "-pf" and i < nb_arg :
      try :
        fin = int(sys.argv[i+1])
      except :
        sys.stderr.write(str(sys.argv) + "\n")
        erreur(3)
      i = i + 1

    # [-out fichier_out] facultatif
    elif sys.argv[i] == "-out" and i < nb_arg :
      try :
        nom_fichier_out = sys.argv[i+1]
      except :
        sys.stderr.write(str(sys.argv) + "\n")
        erreur(3)
      i = i + 1

    # [-lg longueur] facultatif
    elif sys.argv[i] == "-lg" and i < nb_arg :
      try :
        lg = int(sys.argv[i+1])
      except :
        sys.stderr.write(str(sys.argv) + "\n")
        erreur(3)
      i = i + 1

    # [-no_header] facultatif
    elif sys.argv[i] == "-no_header" :
      flag_header = 0

    # [-upper] facultatif
    elif sys.argv[i] == "-upper" :
      flag_upper = 1

    # [-lower] facultatif
    elif sys.argv[i] == "-lower" :
      flag_lower = 1

    # [-rev_cpl] facultatif
    elif sys.argv[i] == "-rev_cpl" :
      flag_rev_cpl = 1

    # [-new_header new_header] facultatif
    elif sys.argv[i] == "-new_header" and i < nb_arg :
      new_header = sys.argv[i+1]
      i = i + 1

    # [-h]
    elif sys.argv[i] == "-h" :
      help()

    # [-H]
    elif sys.argv[i] == "-H" :
      help_detailed()

    # mauvais argument
    else :
      sys.stderr.write(str(sys.argv) + "\n")
      erreur(3)
      
    i = i + 1

  # some controls
  #==============

  if not debut :
    debut=debut_dft
    
  if nom_cherche == "" or nom_fichier_db == "" or debut == 0 or fin < 0 :
    sys.stderr.write(str(sys.argv) + "\n")
    erreur(3)

  if (fin and debut > fin) or debut < debut_dft or fin < 0:
    sys.stderr.write(str(sys.argv) + "\n")
    erreur(3)

  if flag_lower and flag_upper :
    sys.stderr.write(str(sys.argv) + "\n")
    erreur(3)

  # Début
  #======
    
  # ouvre en lecture le fichier d'entrée
  try :
    fichier_db = open(nom_fichier_db,'r')
  except :
    erreur(5, nom_fichier_db)

  # ouverture éventuelle du fichier de sortie
  if nom_fichier_out != "" :
    
    try :
      fichier_out = open(nom_fichier_out,'a')
    except :
      erreur(6, nom_fichier_out)

  # Lecture du fichier de données
  #==============================

  while 1 :

    ligne = fichier_db.readline()

    if ligne == "" :
      break

    no_ligne_lue = no_ligne_lue + 1
    
    if etat == 0 :
             
      if ligne.find(">") == 0:
        # sys.stdout.write(ligne) 
        liste = ligne.split()
        nomTC = liste[0][1:]
                      
        if nomTC == nom_cherche :
          # c'est la ligne d'identité de la séquence
          if flag_header :
            if new_header != "" :
              if new_header[0] != ">" :
                header = ">"
              header += new_header
              for i in range(1, len(liste)) :
                header += " " + liste[i]
            
            else :
              header = ligne

            header = chop(header)
            if flag_rev_cpl :
              if header.find("reverse_complement") < 0 :
                header += " reverse_complement"
            if fichier_out :
              fichier_out.write(header + "\n")
            else:
              sys.stdout.write(header + "\n")

          # new value for etat
          etat=1

      else :
        if no_ligne_lue == 1 : 
          erreur(4)
        
    elif etat == 1 :
        
      if ligne.find(">") == 0:
        break
      else :
        retour = trait_ligne(ligne)
        if not retour :
          erreur(7, str(no_ligne_lue))
        if retour == 2 :
          # on a fini la lecture du segment recherché
          break

  if sequence != "" :
    if flag_rev_cpl :
      sequence = reverse_complement(sequence)
    edit_sequence(sequence)

  sys.exit(0)
